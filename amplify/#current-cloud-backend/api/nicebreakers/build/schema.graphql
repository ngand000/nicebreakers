type Comment @aws_iam @aws_api_key {
  id: ID!
  name: String
  comment: String
  icebreakerID: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Icebreaker @aws_iam @aws_api_key {
  id: ID!
  name: String!
  icebreaker: String
  Comments(filter: ModelCommentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelCommentConnection @aws_api_key @aws_iam {
  items: [Comment]!
  nextToken: String
}

input ModelCommentFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  comment: ModelStringInput
  icebreakerID: ModelIDInput
  and: [ModelCommentFilterInput]
  or: [ModelCommentFilterInput]
  not: ModelCommentFilterInput
}

type Query {
  getComment(id: ID!): Comment @aws_api_key @aws_iam
  listComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection @aws_api_key @aws_iam
  commentsByIcebreakerID(icebreakerID: ID!, sortDirection: ModelSortDirection, filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection @aws_api_key @aws_iam
  getIcebreaker(id: ID!): Icebreaker @aws_api_key @aws_iam
  listIcebreakers(filter: ModelIcebreakerFilterInput, limit: Int, nextToken: String): ModelIcebreakerConnection @aws_api_key @aws_iam
}

input ModelCommentConditionInput {
  name: ModelStringInput
  comment: ModelStringInput
  icebreakerID: ModelIDInput
  and: [ModelCommentConditionInput]
  or: [ModelCommentConditionInput]
  not: ModelCommentConditionInput
}

input CreateCommentInput {
  id: ID
  name: String
  comment: String
  icebreakerID: ID!
}

input UpdateCommentInput {
  id: ID!
  name: String
  comment: String
  icebreakerID: ID
}

input DeleteCommentInput {
  id: ID!
}

type Mutation {
  createComment(input: CreateCommentInput!, condition: ModelCommentConditionInput): Comment @aws_api_key @aws_iam
  updateComment(input: UpdateCommentInput!, condition: ModelCommentConditionInput): Comment @aws_api_key @aws_iam
  deleteComment(input: DeleteCommentInput!, condition: ModelCommentConditionInput): Comment @aws_api_key @aws_iam
  createIcebreaker(input: CreateIcebreakerInput!, condition: ModelIcebreakerConditionInput): Icebreaker @aws_api_key @aws_iam
  updateIcebreaker(input: UpdateIcebreakerInput!, condition: ModelIcebreakerConditionInput): Icebreaker @aws_api_key @aws_iam
  deleteIcebreaker(input: DeleteIcebreakerInput!, condition: ModelIcebreakerConditionInput): Icebreaker @aws_api_key @aws_iam
}

input ModelSubscriptionCommentFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  comment: ModelSubscriptionStringInput
  icebreakerID: ModelSubscriptionIDInput
  and: [ModelSubscriptionCommentFilterInput]
  or: [ModelSubscriptionCommentFilterInput]
}

type Subscription {
  onCreateComment(filter: ModelSubscriptionCommentFilterInput): Comment @aws_subscribe(mutations: ["createComment"]) @aws_api_key @aws_iam
  onUpdateComment(filter: ModelSubscriptionCommentFilterInput): Comment @aws_subscribe(mutations: ["updateComment"]) @aws_api_key @aws_iam
  onDeleteComment(filter: ModelSubscriptionCommentFilterInput): Comment @aws_subscribe(mutations: ["deleteComment"]) @aws_api_key @aws_iam
  onCreateIcebreaker(filter: ModelSubscriptionIcebreakerFilterInput): Icebreaker @aws_subscribe(mutations: ["createIcebreaker"]) @aws_api_key @aws_iam
  onUpdateIcebreaker(filter: ModelSubscriptionIcebreakerFilterInput): Icebreaker @aws_subscribe(mutations: ["updateIcebreaker"]) @aws_api_key @aws_iam
  onDeleteIcebreaker(filter: ModelSubscriptionIcebreakerFilterInput): Icebreaker @aws_subscribe(mutations: ["deleteIcebreaker"]) @aws_api_key @aws_iam
}

type ModelIcebreakerConnection @aws_api_key @aws_iam {
  items: [Icebreaker]!
  nextToken: String
}

input ModelIcebreakerFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  icebreaker: ModelStringInput
  and: [ModelIcebreakerFilterInput]
  or: [ModelIcebreakerFilterInput]
  not: ModelIcebreakerFilterInput
}

input ModelIcebreakerConditionInput {
  name: ModelStringInput
  icebreaker: ModelStringInput
  and: [ModelIcebreakerConditionInput]
  or: [ModelIcebreakerConditionInput]
  not: ModelIcebreakerConditionInput
}

input CreateIcebreakerInput {
  id: ID
  name: String!
  icebreaker: String
}

input UpdateIcebreakerInput {
  id: ID!
  name: String
  icebreaker: String
}

input DeleteIcebreakerInput {
  id: ID!
}

input ModelSubscriptionIcebreakerFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  icebreaker: ModelSubscriptionStringInput
  and: [ModelSubscriptionIcebreakerFilterInput]
  or: [ModelSubscriptionIcebreakerFilterInput]
}
