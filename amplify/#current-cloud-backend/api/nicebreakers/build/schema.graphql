type Account @aws_iam @aws_api_key {
  id: ID!
  userEmail: AWSEmail
  postsLiked: [ID]!
  postsReported: [ID]!
  postDisliked: [ID]!
  Admin: Boolean
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Report @aws_iam @aws_api_key {
  id: ID!
  reason: String!
  postId: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Question @aws_iam @aws_api_key {
  id: ID!
  question: String!
  likes: Int!
  ageRange: [Int!]!
  endorsed: Boolean
  tags: [String]
  author: String
  timesReported: Int!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Comment @aws_iam @aws_api_key {
  id: ID!
  author: String!
  comment: String!
  icebreakerID: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Activity @aws_iam @aws_api_key {
  id: ID!
  name: String!
  description: String!
  Comments(filter: ModelCommentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentConnection
  author: String!
  abstract: String!
  likes: Int!
  captions: [String]!
  playerCount: [Int!]!
  duration: [Int!]!
  ageRange: [Int!]!
  endorsed: Boolean
  fileTypes: [String]!
  timesReported: Int!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelAccountConnection @aws_api_key @aws_iam {
  items: [Account]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelAccountFilterInput {
  id: ModelIDInput
  userEmail: ModelStringInput
  postsLiked: ModelIDInput
  postsReported: ModelIDInput
  postDisliked: ModelIDInput
  Admin: ModelBooleanInput
  and: [ModelAccountFilterInput]
  or: [ModelAccountFilterInput]
  not: ModelAccountFilterInput
  _deleted: ModelBooleanInput
}

type Query {
  getAccount(id: ID!): Account @aws_api_key @aws_iam
  listAccounts(filter: ModelAccountFilterInput, limit: Int, nextToken: String): ModelAccountConnection @aws_api_key @aws_iam
  syncAccounts(filter: ModelAccountFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelAccountConnection @aws_api_key @aws_iam
  getReport(id: ID!): Report @aws_api_key @aws_iam
  listReports(filter: ModelReportFilterInput, limit: Int, nextToken: String): ModelReportConnection @aws_api_key @aws_iam
  syncReports(filter: ModelReportFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelReportConnection @aws_api_key @aws_iam
  getQuestion(id: ID!): Question @aws_api_key @aws_iam
  listQuestions(filter: ModelQuestionFilterInput, limit: Int, nextToken: String): ModelQuestionConnection @aws_api_key @aws_iam
  syncQuestions(filter: ModelQuestionFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelQuestionConnection @aws_api_key @aws_iam
  getComment(id: ID!): Comment @aws_api_key @aws_iam
  listComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection @aws_api_key @aws_iam
  syncComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelCommentConnection @aws_api_key @aws_iam
  commentsByIcebreakerID(icebreakerID: ID!, sortDirection: ModelSortDirection, filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection @aws_api_key @aws_iam
  getActivity(id: ID!): Activity @aws_api_key @aws_iam
  listActivities(filter: ModelActivityFilterInput, limit: Int, nextToken: String): ModelActivityConnection @aws_api_key @aws_iam
  syncActivities(filter: ModelActivityFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelActivityConnection @aws_api_key @aws_iam
}

input ModelAccountConditionInput {
  userEmail: ModelStringInput
  postsLiked: ModelIDInput
  postsReported: ModelIDInput
  postDisliked: ModelIDInput
  Admin: ModelBooleanInput
  and: [ModelAccountConditionInput]
  or: [ModelAccountConditionInput]
  not: ModelAccountConditionInput
  _deleted: ModelBooleanInput
}

input CreateAccountInput {
  id: ID
  userEmail: AWSEmail
  postsLiked: [ID]!
  postsReported: [ID]!
  postDisliked: [ID]!
  Admin: Boolean
  _version: Int
}

input UpdateAccountInput {
  id: ID!
  userEmail: AWSEmail
  postsLiked: [ID]
  postsReported: [ID]
  postDisliked: [ID]
  Admin: Boolean
  _version: Int
}

input DeleteAccountInput {
  id: ID!
  _version: Int
}

type Mutation {
  createAccount(input: CreateAccountInput!, condition: ModelAccountConditionInput): Account @aws_api_key @aws_iam
  updateAccount(input: UpdateAccountInput!, condition: ModelAccountConditionInput): Account @aws_api_key @aws_iam
  deleteAccount(input: DeleteAccountInput!, condition: ModelAccountConditionInput): Account @aws_api_key @aws_iam
  createReport(input: CreateReportInput!, condition: ModelReportConditionInput): Report @aws_api_key @aws_iam
  updateReport(input: UpdateReportInput!, condition: ModelReportConditionInput): Report @aws_api_key @aws_iam
  deleteReport(input: DeleteReportInput!, condition: ModelReportConditionInput): Report @aws_api_key @aws_iam
  createQuestion(input: CreateQuestionInput!, condition: ModelQuestionConditionInput): Question @aws_api_key @aws_iam
  updateQuestion(input: UpdateQuestionInput!, condition: ModelQuestionConditionInput): Question @aws_api_key @aws_iam
  deleteQuestion(input: DeleteQuestionInput!, condition: ModelQuestionConditionInput): Question @aws_api_key @aws_iam
  createComment(input: CreateCommentInput!, condition: ModelCommentConditionInput): Comment @aws_api_key @aws_iam
  updateComment(input: UpdateCommentInput!, condition: ModelCommentConditionInput): Comment @aws_api_key @aws_iam
  deleteComment(input: DeleteCommentInput!, condition: ModelCommentConditionInput): Comment @aws_api_key @aws_iam
  createActivity(input: CreateActivityInput!, condition: ModelActivityConditionInput): Activity @aws_api_key @aws_iam
  updateActivity(input: UpdateActivityInput!, condition: ModelActivityConditionInput): Activity @aws_api_key @aws_iam
  deleteActivity(input: DeleteActivityInput!, condition: ModelActivityConditionInput): Activity @aws_api_key @aws_iam
}

input ModelSubscriptionAccountFilterInput {
  id: ModelSubscriptionIDInput
  userEmail: ModelSubscriptionStringInput
  postsLiked: ModelSubscriptionIDInput
  postsReported: ModelSubscriptionIDInput
  postDisliked: ModelSubscriptionIDInput
  Admin: ModelSubscriptionBooleanInput
  and: [ModelSubscriptionAccountFilterInput]
  or: [ModelSubscriptionAccountFilterInput]
  _deleted: ModelBooleanInput
}

type Subscription {
  onCreateAccount(filter: ModelSubscriptionAccountFilterInput): Account @aws_subscribe(mutations: ["createAccount"]) @aws_api_key @aws_iam
  onUpdateAccount(filter: ModelSubscriptionAccountFilterInput): Account @aws_subscribe(mutations: ["updateAccount"]) @aws_api_key @aws_iam
  onDeleteAccount(filter: ModelSubscriptionAccountFilterInput): Account @aws_subscribe(mutations: ["deleteAccount"]) @aws_api_key @aws_iam
  onCreateReport(filter: ModelSubscriptionReportFilterInput): Report @aws_subscribe(mutations: ["createReport"]) @aws_api_key @aws_iam
  onUpdateReport(filter: ModelSubscriptionReportFilterInput): Report @aws_subscribe(mutations: ["updateReport"]) @aws_api_key @aws_iam
  onDeleteReport(filter: ModelSubscriptionReportFilterInput): Report @aws_subscribe(mutations: ["deleteReport"]) @aws_api_key @aws_iam
  onCreateQuestion(filter: ModelSubscriptionQuestionFilterInput): Question @aws_subscribe(mutations: ["createQuestion"]) @aws_api_key @aws_iam
  onUpdateQuestion(filter: ModelSubscriptionQuestionFilterInput): Question @aws_subscribe(mutations: ["updateQuestion"]) @aws_api_key @aws_iam
  onDeleteQuestion(filter: ModelSubscriptionQuestionFilterInput): Question @aws_subscribe(mutations: ["deleteQuestion"]) @aws_api_key @aws_iam
  onCreateComment(filter: ModelSubscriptionCommentFilterInput): Comment @aws_subscribe(mutations: ["createComment"]) @aws_api_key @aws_iam
  onUpdateComment(filter: ModelSubscriptionCommentFilterInput): Comment @aws_subscribe(mutations: ["updateComment"]) @aws_api_key @aws_iam
  onDeleteComment(filter: ModelSubscriptionCommentFilterInput): Comment @aws_subscribe(mutations: ["deleteComment"]) @aws_api_key @aws_iam
  onCreateActivity(filter: ModelSubscriptionActivityFilterInput): Activity @aws_subscribe(mutations: ["createActivity"]) @aws_api_key @aws_iam
  onUpdateActivity(filter: ModelSubscriptionActivityFilterInput): Activity @aws_subscribe(mutations: ["updateActivity"]) @aws_api_key @aws_iam
  onDeleteActivity(filter: ModelSubscriptionActivityFilterInput): Activity @aws_subscribe(mutations: ["deleteActivity"]) @aws_api_key @aws_iam
}

type ModelReportConnection @aws_api_key @aws_iam {
  items: [Report]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelReportFilterInput {
  id: ModelIDInput
  reason: ModelStringInput
  postId: ModelIDInput
  and: [ModelReportFilterInput]
  or: [ModelReportFilterInput]
  not: ModelReportFilterInput
  _deleted: ModelBooleanInput
}

input ModelReportConditionInput {
  reason: ModelStringInput
  postId: ModelIDInput
  and: [ModelReportConditionInput]
  or: [ModelReportConditionInput]
  not: ModelReportConditionInput
  _deleted: ModelBooleanInput
}

input CreateReportInput {
  id: ID
  reason: String!
  postId: ID!
  _version: Int
}

input UpdateReportInput {
  id: ID!
  reason: String
  postId: ID
  _version: Int
}

input DeleteReportInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionReportFilterInput {
  id: ModelSubscriptionIDInput
  reason: ModelSubscriptionStringInput
  postId: ModelSubscriptionIDInput
  and: [ModelSubscriptionReportFilterInput]
  or: [ModelSubscriptionReportFilterInput]
  _deleted: ModelBooleanInput
}

type ModelQuestionConnection @aws_api_key @aws_iam {
  items: [Question]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelQuestionFilterInput {
  id: ModelIDInput
  question: ModelStringInput
  likes: ModelIntInput
  ageRange: ModelIntInput
  endorsed: ModelBooleanInput
  tags: ModelStringInput
  author: ModelStringInput
  timesReported: ModelIntInput
  and: [ModelQuestionFilterInput]
  or: [ModelQuestionFilterInput]
  not: ModelQuestionFilterInput
  _deleted: ModelBooleanInput
}

input ModelQuestionConditionInput {
  question: ModelStringInput
  likes: ModelIntInput
  ageRange: ModelIntInput
  endorsed: ModelBooleanInput
  tags: ModelStringInput
  author: ModelStringInput
  timesReported: ModelIntInput
  and: [ModelQuestionConditionInput]
  or: [ModelQuestionConditionInput]
  not: ModelQuestionConditionInput
  _deleted: ModelBooleanInput
}

input CreateQuestionInput {
  id: ID
  question: String!
  likes: Int!
  ageRange: [Int!]!
  endorsed: Boolean
  tags: [String]
  author: String
  timesReported: Int!
  _version: Int
}

input UpdateQuestionInput {
  id: ID!
  question: String
  likes: Int
  ageRange: [Int!]
  endorsed: Boolean
  tags: [String]
  author: String
  timesReported: Int
  _version: Int
}

input DeleteQuestionInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionQuestionFilterInput {
  id: ModelSubscriptionIDInput
  question: ModelSubscriptionStringInput
  likes: ModelSubscriptionIntInput
  ageRange: ModelSubscriptionIntInput
  endorsed: ModelSubscriptionBooleanInput
  tags: ModelSubscriptionStringInput
  author: ModelSubscriptionStringInput
  timesReported: ModelSubscriptionIntInput
  and: [ModelSubscriptionQuestionFilterInput]
  or: [ModelSubscriptionQuestionFilterInput]
  _deleted: ModelBooleanInput
}

type ModelCommentConnection @aws_api_key @aws_iam {
  items: [Comment]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelCommentFilterInput {
  id: ModelIDInput
  author: ModelStringInput
  comment: ModelStringInput
  icebreakerID: ModelIDInput
  and: [ModelCommentFilterInput]
  or: [ModelCommentFilterInput]
  not: ModelCommentFilterInput
  _deleted: ModelBooleanInput
}

input ModelCommentConditionInput {
  author: ModelStringInput
  comment: ModelStringInput
  icebreakerID: ModelIDInput
  and: [ModelCommentConditionInput]
  or: [ModelCommentConditionInput]
  not: ModelCommentConditionInput
  _deleted: ModelBooleanInput
}

input CreateCommentInput {
  id: ID
  author: String!
  comment: String!
  icebreakerID: ID!
  _version: Int
}

input UpdateCommentInput {
  id: ID!
  author: String
  comment: String
  icebreakerID: ID
  _version: Int
}

input DeleteCommentInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionCommentFilterInput {
  id: ModelSubscriptionIDInput
  author: ModelSubscriptionStringInput
  comment: ModelSubscriptionStringInput
  icebreakerID: ModelSubscriptionIDInput
  and: [ModelSubscriptionCommentFilterInput]
  or: [ModelSubscriptionCommentFilterInput]
  _deleted: ModelBooleanInput
}

type ModelActivityConnection @aws_api_key @aws_iam {
  items: [Activity]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelActivityFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  description: ModelStringInput
  author: ModelStringInput
  abstract: ModelStringInput
  likes: ModelIntInput
  captions: ModelStringInput
  playerCount: ModelIntInput
  duration: ModelIntInput
  ageRange: ModelIntInput
  endorsed: ModelBooleanInput
  fileTypes: ModelStringInput
  timesReported: ModelIntInput
  and: [ModelActivityFilterInput]
  or: [ModelActivityFilterInput]
  not: ModelActivityFilterInput
  _deleted: ModelBooleanInput
}

input ModelActivityConditionInput {
  name: ModelStringInput
  description: ModelStringInput
  author: ModelStringInput
  abstract: ModelStringInput
  likes: ModelIntInput
  captions: ModelStringInput
  playerCount: ModelIntInput
  duration: ModelIntInput
  ageRange: ModelIntInput
  endorsed: ModelBooleanInput
  fileTypes: ModelStringInput
  timesReported: ModelIntInput
  and: [ModelActivityConditionInput]
  or: [ModelActivityConditionInput]
  not: ModelActivityConditionInput
  _deleted: ModelBooleanInput
}

input CreateActivityInput {
  id: ID
  name: String!
  description: String!
  author: String!
  abstract: String!
  likes: Int!
  captions: [String]!
  playerCount: [Int!]!
  duration: [Int!]!
  ageRange: [Int!]!
  endorsed: Boolean
  fileTypes: [String]!
  timesReported: Int!
  _version: Int
}

input UpdateActivityInput {
  id: ID!
  name: String
  description: String
  author: String
  abstract: String
  likes: Int
  captions: [String]
  playerCount: [Int!]
  duration: [Int!]
  ageRange: [Int!]
  endorsed: Boolean
  fileTypes: [String]
  timesReported: Int
  _version: Int
}

input DeleteActivityInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionActivityFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  author: ModelSubscriptionStringInput
  abstract: ModelSubscriptionStringInput
  likes: ModelSubscriptionIntInput
  captions: ModelSubscriptionStringInput
  playerCount: ModelSubscriptionIntInput
  duration: ModelSubscriptionIntInput
  ageRange: ModelSubscriptionIntInput
  endorsed: ModelSubscriptionBooleanInput
  fileTypes: ModelSubscriptionStringInput
  timesReported: ModelSubscriptionIntInput
  and: [ModelSubscriptionActivityFilterInput]
  or: [ModelSubscriptionActivityFilterInput]
  _deleted: ModelBooleanInput
}
